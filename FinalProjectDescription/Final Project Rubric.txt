2XB3_2019 Final Project - Marking Scheme CodeDescriptionProject Log10%LOG1(0-5)Quality of the log the log captures depth of the team project implementations: what happened, what was decided,what was implemented, etc. It could be any events relevant to the project, from an individual activity in programming a class to a group meeting on Google+, and so on. LOG2(0-5)Quantity of the log the log captures breadth of the team project LOG3(0-5)Log Format and style Ch the Timestamp is correct and in right order. Also check the column names and existence of body and headerRequirements Specification Document15%SRS1(0-5)SRS Quality:SRS defines the external behaviour of the system and should comprise the following items:1. The domain. Brief description of the application domain and of the goals you should fulfil by developing an implementation. This includes a precise documentation of the domain knowledge that is relevant to derive specifications. who are the stakeholders and what are their goals and expectations? what are the main entities that characterize the domain? What are their main relationships? How are they affected by the system we will develop?2. Functional Requirements. These describe what the product does by using informal, semi-formal, or formal notations or a suitable mixture of them (you may include use case document and a UML use case diagram and/or a class diagram).3. Non-Functional Requirements. These may be classified into the following categories: reliability (Scalability, availability, integrity, security, safety, etc.), accuracy of results, performance, human-computer interface issues, operating constraints, physical constraints, portability issues, and others. (scalability must be listed as one of the NFRs for all projects as all of them are dealing with datasets with growing sizes. If they missed this NFR, they lose 0.5 score for this item 4. Requirements on the development and maintenance process. These include quality control procedures (in particular, system test procedures), priorities of the required functions, likely changes to the system maintenance procedures, and other requirements.- SRS2(0-5)SRS document format and style:System Design Specification Document25%SDS1 Ð Common section (0-5)the common section as described below is complete. SDS2 Ð Class diagram and description (0-5)- a description of the classes/modules you have decided to use in your application, and your explanation of why you have decomposed the application into those classes; You should include a UML class diagram showing a static representation of your application classes and relationship between classes;- for each class, a description of the interface (public entities), and make ?sure that there is a description of the semantics (behaviour) of each public method in the class, as well as a description of the syntax;SDS3  - Modular structure and uses(0-5)¥ - a description or a table to trace back to requirements for each class interface; ¥ a view of the application modules and which module uses other modules.SDS4 Ð State diagrams(0-5)for each class, a description of the implementation (private entities), including class variables - include enough detail to show how the class variables are maintained by the methods in the class; you should include two UML state machine diagrams for two most interesting classes in your implementation; SDS5 (0-5)¥ an internal review/evaluation of the design.?¥ SDS6 (0-5) SRS document format and style- including typos, different headers with different fonts, etc.Implementation55%Imp1(0-5)Execution and compilationthe application compiles and runs and generate the results. The students should include a deployment document.)Imp2(0-5)Correctness (verification)- Does the application address what described in the requirements document Imp3(0-5)Correctness (validation)- Does the application address what described in the project goals and scope- Imp4(0-5)Novelty/creativity- judge based on evidence of  using algorithmic content Imp5 (0-5)Consistency of style -  Sufficient use of object oriented programming ?capabilities  - a clear and well-formatted Input and output (either UI or txt files)- Readability of the code and presence of sufficient and meaningful comments in the code- Code organizationImp 6(0-5)BonusExcellence in implementation Imp 7(0-5)BonusSDLC MethodologyCheck if students used Scrum methodology to develop their project. It is not enough just to name using the Scrum methodology but a number of Sprints and backlog feature and Sprint Meetings report should be present.